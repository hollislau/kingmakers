type Dominion
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, operations: [read, create, update, delete] }
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  turns: [Turn]!
  notes: String
}

type DominionEthic
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedDominionEthics"
  ) {
  id: Ethic!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type DominionEthicHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: Ethic!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type DominionMorality
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedDominionMoralities"
  ) {
  id: Morality!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type DominionMoralityHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: Morality!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type SettlementEthic
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedSettlementEthics"
  ) {
  id: Ethic!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type SettlementEthicHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: Ethic!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type SettlementMorality
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedSettlementMoralities"
  ) {
  id: Morality!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type SettlementMoralityHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: Morality!
  version: Int!
  label: String!
  attribute: Attribute!
  modifier: Int!
  sortOrder: Int!
  type: SortType!
}

type Terrain
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedTerrain"
  ) {
  id: TerrainType!
  version: Int!
  label: String!
  isMain: Boolean!
  sortOrder: Int!
  type: SortType!
}

type TerrainHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: TerrainType!
  version: Int!
  label: String!
  isMain: Boolean!
  sortOrder: Int!
  type: SortType!
}

type Improvement
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedImprovements"
  ) {
  id: ImprovementType!
  version: Int!
  label: String!
  description: String!
  prerequisites: ImprovementPrerequisites!
  cost: ImprovementCost!
  effects: ImprovementEffects!
  upgradeableTo: ImprovementType
  sortOrder: Int!
  type: SortType!
}

type ImprovementHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: ImprovementType!
  version: Int!
  label: String!
  description: String!
  prerequisites: ImprovementPrerequisites!
  cost: ImprovementCost!
  effects: ImprovementEffects!
  upgradeableTo: ImprovementType
  sortOrder: Int!
  type: SortType!
}

type CostByTerrain
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(
    name: "BySortOrder"
    fields: ["type", "sortOrder"]
    queryField: "sortedCostsByTerrain"
  ) {
  id: TerrainType!
  version: Int!
  label: String!
  farmCost: Int
  roadCost: Int!
  sortOrder: Int!
  type: SortType!
}

type CostByTerrainHistory
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["Users"], operations: [read] }
    ]
  )
  @key(fields: ["id", "version"]) {
  id: TerrainType!
  version: Int!
  label: String!
  farmCost: Int
  roadCost: Int!
  sortOrder: Int!
  type: SortType!
}

type Turn {
  preTurn: PreTurn!
  upkeep: Upkeep!
  construction: Construction!
  attributes: Attributes!
}

type PreTurn {
  ruler: Character!
  activeLeaders: [Character]!
  inactiveLeaders: [Character]!
  ethic: EthicData!
  morality: MoralityData!
}

type Character {
  firstName: String!
  lastName: String
  strength: Int!
  dexterity: Int!
  constitution: Int!
  intelligence: Int!
  wisdom: Int!
  charisma: Int!
}

type EthicData {
  value: Ethic!
  version: Int!
}

type MoralityData {
  value: Morality!
  version: Int!
}

type Upkeep {
  stabilityRoll: Int!
  unrestReductionRoll: Int
  revenueRoll: Int!
  revenueModifier: Int
}

type Construction {
  hexes: [[Hex!]!]!
}

type Hex {
  id: String!
  mainTerrain: MainTerrainType!
  otherTerrain: [TerrainType]!
  improvements: [ImprovementData]!
  settlement: Settlement
}

type Settlement {
  name: String!
  ethic: EthicData!
  morality: MoralityData!
}

type ImprovementData {
  type: ImprovementType!
  version: Int!
  costByTerrainVersion: Int
  rpInvested: Int!
}

type ImprovementPrerequisites {
  minDominionSize: Int
  terrain: [TerrainType]!
  improvements: [ImprovementType]!
  surroundingTerrain: [TerrainType]!
  surroundingImprovements: [ImprovementType]!
  excludedByTerrain: [TerrainType]!
  excludedByImprovements: [ImprovementType]!
}

type ImprovementCost {
  type: ImprovementCostType!
  value: Int
}

type ImprovementEffects {
  modifiers: [ImprovementModifier]!
  countsAsBuildings: [BuildingType]!
  countsAsTerrain: [TerrainType]!
  unitHousing: UnitSize
}

type ImprovementModifier {
  attribute: Attribute!
  modifier: Int!
  dominionTerrainScaling: DominionTerrainScaling
  hexTerrainRequirements: [TerrainType]!
  hexImprovementRequirements: [ImprovementType]!
  taxationRequired: Boolean!
}

type DominionTerrainScaling {
  type: TerrainType!
  forEvery: Int!
}

type Attributes {
  stability: Int!
  loyalty: Int!
  economy: Int!
  unrest: Int!
  size: Int!
  treasury: Int!
  revenue: Int!
  consumption: Int!
  corruption: Int!
  crime: Int!
  law: Int!
  lore: Int!
  productivity: Int!
  society: Int!
  defense: Int!
}

enum Ethic {
  LAWFUL
  NEUTRAL
  CHAOTIC
}

enum Morality {
  GOOD
  NEUTRAL
  EVIL
}

enum MainTerrainType {
  DESERT
  FOREST
  HILL
  MARSH
  MOUNTAIN
  PLAIN
}

enum TerrainType {
  DESERT
  FOREST
  HILL
  MARSH
  MOUNTAIN
  PLAIN
  COASTLINE
  RIVER
  LAKE
}

enum ImprovementType {
  AQUEDUCT
  CANAL
  FARM
  FISHERY
  FORT
  HIGHWAY
  MINE
  PAVED_STREET
  QUARRY
  ROAD
  SAWMILL
  WATCHTOWER
}

enum ImprovementCostType {
  STATIC
  ROAD_MULTIPLIER
  FARM
}

enum BuildingType {
  ACADEMY
  ALCHEMIST_LAB
  ARENA
  BANK
  BARDIC_COLLEGE
  BARRACKS
  BLACK_MARKET
  BREWERY
  BUREAU
  CASTERS_TOWER
  CASTLE
  CATHEDRAL
  CISTERN
  CITY_WALL
  DUMP
  EXOTIC_ARTISAN
  FOREIGN_QUARTER
  FOUNDRY
  GARRISON
  GRANARY
  GRAVEYARD
  GUILDHALL
  HERBALIST
  HOSPITAL
  HOUSE
  INN
  JAIL
  LIBRARY
  LUXURY_STORE
  MAGICAL_ACADEMY
  MANSION
  MARKET
  MILL
  MOAT
  MONASTERY
  MONUMENT
  MUSEUM
  NOBLE_VILLA
  OBSERVATORY
  PALACE
  PIER
  SHOP
  SHRINE
  SMITHY
  STABLE
  STOCKYARD
  TANNERY
  TAVERN
  TEMPLE
  TENEMENT
  THEATER
  TOWN_HALL
  TRADE_SHOP
  UNIVERSITY
  WATCHTOWER
  WATERFRONT
  WATERGATE
  WATERWAY
}

enum UnitSize {
  D4
  D6
  D8
  D10
  D12
}

enum Attribute {
  STABILITY
  LOYALTY
  ECONOMY
  UNREST
  SIZE
  TREASURY
  REVENUE
  CONSUMPTION
  CORRUPTION
  CRIME
  LAW
  LORE
  PRODUCTIVITY
  SOCIETY
  DEFENSE
}

enum SortType {
  ALIGNMENT
  TERRAIN
  IMPROVEMENT
  COST
}
